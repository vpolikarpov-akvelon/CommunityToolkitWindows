
# https://docs.github.com/actions/using-workflows/about-workflows
# https://docs.github.com/actions/using-workflows/workflow-syntax-for-github-actions

name: CI

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  merge_group:

env:
  DOTNET_VERSION: ${{ '7.0.x' }}
  ENABLE_DIAGNOSTICS: false
  #COREHOST_TRACE: 1
  COREHOST_TRACEFILE: corehosttrace.log

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build:
    name: WinUI${{ matrix.platform-version }}
    runs-on: windows-latest

    # See https://docs.github.com/actions/using-jobs/using-a-matrix-for-your-jobs
    strategy:
      fail-fast: false # prevent one matrix pipeline from being cancelled if one fails, we want them both to run to completion.
      matrix:
        platform-version: ["2", "3"]

    env:
      MULTI_TARGET_DIRECTORY: tooling/MultiTarget
      # faux-ternary expression to select which platforms to build for each platform vs. duplicating step below.
      TARGET_PLATFORMS: ${{ matrix.platform-version != '3' && 'all' || 'all-uwp' }}
      TEST_PLATFORM: ${{ matrix.platform-version != '3' && 'UWP' || 'WinAppSdk' }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Configure ssh server
        env: 
          SSH_SERVER: ${{ secrets.SSH_SERVER }}
          SSH_SERVER_IP_ADDR: ${{ secrets.SSH_SERVER_IP_ADDR }}
          SSH_KEY: ${{ secrets.SSH_KEY }}
          SSH_PUBKEY: ${{ secrets.SSH_PUBKEY }}
        run: |
          # Install and start ssh server
          Add-WindowsCapability -Online -Name OpenSSH.Server
          Start-Service sshd

          # Install ssh client, start agent and add private key
          Add-WindowsCapability -Online -Name OpenSSH.Client
          Get-Service -Name ssh-agent | Set-Service -StartupType Manual
          Start-Service ssh-agent
          $env:SSH_KEY | ssh-add -

          # Add public key from env to authorized_keys
          whoami

          New-Item -Force -ItemType Directory -Path $env:USERPROFILE\.ssh
          Add-Content -Force -Path $env:USERPROFILE\.ssh\authorized_keys -Value $env:SSH_PUBKEY

          Add-Content -Force -Path $env:ProgramData\ssh\administrators_authorized_keys -Value "$env:SSH_PUBKEY";
          icacls.exe "$env:ProgramData\ssh\administrators_authorized_keys" /inheritance:r /grant "Administrators:F" /grant "SYSTEM:F"

      - name: Install .NET SDK v${{ env.DOTNET_VERSION }}
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: .NET Info (if diagnostics)
        if: ${{ env.ENABLE_DIAGNOSTICS == 'true' }}
        run: dotnet --info

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Enable User-Mode Dumps collecting
        shell: powershell
        run: |
          New-Item '${{ github.workspace }}\CrashDumps' -Type Directory
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps' -Name 'DumpFolder' -Type ExpandString -Value '${{ github.workspace }}\CrashDumps'
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps' -Name 'DumpCount' -Type DWord -Value '10'
          Set-ItemProperty -Path 'HKLM:\SOFTWARE\Microsoft\Windows\Windows Error Reporting\LocalDumps' -Name 'DumpType' -Type DWord -Value '2'

      # Restore Tools from Manifest list in the Repository
      - name: Restore dotnet tools
        run: dotnet tool restore

      - name: Run Uno Check to Install Dependencies
        run: dotnet tool run uno-check --ci --fix --non-interactive --skip wsl --skip androidemulator --verbose

      - name: Add msbuild to PATH
        uses: microsoft/setup-msbuild@v1.3.1

      - name: Enable ${{ env.TARGET_PLATFORMS }} TargetFrameworks
        working-directory: ./${{ env.MULTI_TARGET_DIRECTORY }}
        run: powershell -version 5.1 -command "./UseTargetFrameworks.ps1 ${{ env.TARGET_PLATFORMS }}" -ErrorAction Stop

      - name: Generate solution w/ ${{ env.TEST_PLATFORM }} Tests
        working-directory: ./
        run: powershell -version 5.1 -command "./tooling/GenerateAllSolution.ps1 -IncludeHeads ${{ env.TEST_PLATFORM }}${{ env.ENABLE_DIAGNOSTICS == 'true' && ' -UseDiagnostics' || '' }}" -ErrorAction Stop

      - name: Enable Uno.WinUI (in WinUI3 matrix only)
        working-directory: ./${{ env.MULTI_TARGET_DIRECTORY }}
        run: powershell -version 5.1 -command "./UseUnoWinUI.ps1 3" -ErrorAction Stop
        if: ${{ matrix.platform-version == '3' }}

      - name: MSBuild
        run: msbuild.exe CommunityToolkit.AllComponents.sln /restore /nowarn:MSB4011 -p:Configuration=Release -m -p:UseDotNetNativeToolchain=false

      # Build All Packages
      - name: pack experiments
        working-directory: ./tooling/Scripts/
        run: ./PackEachExperiment.ps1 all

      # Run tests
      - name: Setup VSTest Path
        uses: darenm/Setup-VSTest@v1.2

      - name: Run SourceGenerators tests
        id: test-generator
        run: vstest.console.exe ./tooling/CommunityToolkit.Tooling.SampleGen.Tests/bin/Release/net6.0/CommunityToolkit.Tooling.SampleGen.Tests.dll /logger:"trx;LogFileName=SourceGenerators.trx"

      - name: Run tests
        env: 
          SSH_SERVER: ${{ secrets.SSH_SERVER }}
          SSH_SERVER_IP_ADDR: ${{ secrets.SSH_SERVER_IP_ADDR }}
        id: test-platform
        run: |
          while ($true) {
            Write-Host "Running tests..."
            vstest.console.exe `
              ./tooling/**/CommunityToolkit.Tests.${{ env.TEST_PLATFORM }}.build.appxrecipe `
              /Framework:FrameworkUap10 `
              /Logger:"trx;LogFileName=${{ env.TEST_PLATFORM }}.trx" `
              /Diag:diag.log `
              /Blame
            if ($LASTEXITCODE -ne 0) {
              Write-Host "==========> Tests FAILED at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'))"
              break
            } else {
              Write-Host "==========> Tests PASSED at $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss'))"
            }
            Start-Sleep 60
          }

      - name: Artifact - TestResults
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: test-results-WinUI${{ matrix.platform-version }}
          path: ./TestResults

      - name: List CrashDumps
        run: |
          Get-ChildItem ./CrashDumps
        if: ${{ always() }}

      - name: Artifact - CrashDumps
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: CrashDumps-WinUI${{ matrix.platform-version }}
          path: './CrashDumps'

      - name: Artifact - Diagnostic Logs
        uses: actions/upload-artifact@v3
        if: ${{ always() }}
        with:
          name: diag-WinUI${{ matrix.platform-version }}
          path: ./diag*
